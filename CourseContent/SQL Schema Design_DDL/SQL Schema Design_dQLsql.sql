-- DQL
-- Display All Locations
	-- SELECT * FROM Location

-- DISPLAY LOCATION NAMES (COLUMN FILTERING)
	-- SELECT LOCATIONNAME FROM LOCATION

--DISPLAY TOP 2 LOCATIONS 
	-- SELECT TOP 2 LOCATIONNAME FROM LOCATION

-- DISPLAY THE OWNER'S DATA (ROW FILERING)
	-- SELECT * FROM USERINFO WHERE USERROLE='OWNER'

-- DISPLAY USERS FROM LOCATION WITH LOCATIONID AS 1
	-- SELECT * FROM USERINFO WHERE USERLOCATION=1

-- DISPLAY USER INFORMATION WITH VALID PHONE NUMBER
	-- SELECT * FROM USERINFO WHERE PHONE IS NOT NULL

-- DISPLAY THE CUSTOMER INFORMATION WITH INVALID PHONE NUMER
	-- SELECT * FROM USERINFO WHERE USERROLE='USER' AND PHONE IS NULL

-- ROW FILTER WITH COLUMN FILTER. MINORER VALUES OF RESTA WITH GIVEN OWNER
	-- SELECT MINORDERVALUE FROM Restaurant WHERE ROWNER=102

-- GET THE MENUITEMS FROM GIVEN RESTUARANT
	-- SELECT * FROM MenuItem WHERE RESTAURANTID=201

-- GET AVERAGE PRICE OF MENUITEMS (AGGREGATE FUNCTION)
	--SELECT AVG(PRICE) FROM MenuItem

-- GET AVERAGE PRICE OF MENUITEMS FOR A GIVEN RESTAURANT
	--SELECT AVG(PRICE) FROM MenuItem WHERE RESTAURANTID=201

-- GET NUMBER OF ORDERS FOR A GIEN RESTUANT
	--SELECT COUNT(OID) FROM [ORDER] WHERE RESTID=201

-- SELECT RESTUARANTS WITH ORDERS / MIN ONE ORDER
  -- SELECT RESTID FROM [Order]

-- SELECT RESTUARANTS WITH ORDERS / MIN ONE ORDER WITHOUT DUPLICATION
	-- SELECT DISTINCT(RESTID) FROM [ORDER]

-- GET MENUITEM WITH MINIMUM PRICE FRO A GIVEN RESTAURANT
	--SELECT MIN(PRICE) FROM MENUITEM WHERE [RESTAURANTID]=201

-- AGGREGATE FUNCTIONS : COUNT, MIN, MAX, AVG

-- SEARCH USERS BASED ON USERNAME: SEARCH FOR SUBSTRING
	-- SELECT * FROM USERINFO WHERE USERNAME LIKE '%AI' -- % MANY CHARS

-- SEARCH AVAILABLE DOSA ITEMS FROM A GIVEN RESTAUNT
	-- SELECT * FROM MenuItem WHERE DISHNAME LIKE '%DOSA%' AND RESTAURANTID=201
-- SELECT MENUITEMS FROM A GIVEN RESTAURANT SORTED BASED ON PRICE
	-- SELECT * FROM MenuItem WHERE RESTAURANTID=201 ORDER BY PRICE

-- SELECT MENUITEMS FROM A GIVEN RESTAURANT SORTED BASED ON PRICE, HIGH TO LOW
-- OBSERVATION: ORDER BY SHOULD COME AT END
	-- SELECT * FROM MenuItem WHERE RESTAURANTID=201 ORDER BY PRICE DESC

-- PRINT THE USERNAME AND PHONE NUMBER
	-- SELECT USERNAME,PHONE FROM USERINFO

-- PRINT THE USERNAME AND PHONE NUMBER / NA IF PHONE NUMBER IS NOT AVAILABLE
-- OBSERVATION: USERPHONE IS COULMN ALIAS
	-- SELECT USERNAME,ISNULL(PHONE,'NA') USERPHONE FROM USERINFO

-- PRINT THE USER DETAILS IN NAME : PHONE FORMAT
	-- SELECT CONCAT(USERNAME,' : ',ISNULL(PHONE,'NA')) DISPLAYTEXT FROM USERINFO

-- NUMBER OF USERS FROM LOCATION ID 1
	-- SELECT COUNT(*) FROM USERINFO WHERE USERLOCATION=1

-- PRINT THE USERCOUNT ALONG WITH LOCATION ID
	--SELECT COUNT(*),USERLOCATION FROM USERINFO
	--GROUP BY USERLOCATION

-- PRINT LOCATION WITH MINIMUM 2 USERS
	--SELECT COUNT(*) USERCOUNT,USERLOCATION FROM USERINFO
	--GROUP BY USERLOCATION
	--HAVING COUNT(*)>=2

-- GET THE MENU NAMES WITH PRICE RANGE OF 200 TO 300
	-- SELECT * FROM MENUITEM WHERE PRICE BETWEEN 100 AND 300

-- GET THE USERS INFO OF ROLE EITHER OWNER OR ADMIN
	-- SELECT * FROM USERINFO WHERE USERROLE IN ('ADMIN','OWNER')
	-- TODO: SELECT * FROM USERINFO WHERE USERROLE  = ANY()


-- Get Users list from given location ID
	--SELECT UI.*,loC.LocationName FROM USERINFO UI
	--INNER JOIN [Location] LOC ON UI.USERLOCATION=LOC.LocationId
	--WHERE UI.USERLOCATION=1

-- GET LINE ITEMS WITH DISHNAME AND QUANTITY
   --SELECT QTY,DISHNAME FROM ORDERLINEITEMS
   --INNER JOIN MenuItem ON ORDERLINEITEMS.MENUID=MenuItem.MID
   --WHERE ORDERID=401

-- GET AVERAGE PRICE OF ITEMS FOR A GIVEN RESTAURANT
		--SELECT FLOOR(AVG(PRICE)) FROM MenuItem
		--WHERE RESTAURANTID=201

-- GET AVERAGE PRICE OF ITEMS OF A2B - SUB QUERY - EMBEDDED QUERY
	--SELECT FLOOR(AVG(PRICE)) FROM MenuItem
	--WHERE RESTAURANTID=(SELECT RID FROM  Restaurant WHERE RNAME = 'A2B')

-- GET RESTAURANTS WITH MINIMUM ONE ORDERS
	--SELECT * FROM Restaurant
	--WHERE RID IN (SELECT DISTINCT(RESTID) FROM [ORDER])

-- GET RESTAURANTS WITH OUT ORDER
	--SELECT * FROM Restaurant
	--WHERE RID NOT IN (SELECT DISTINCT(RESTID) FROM [ORDER])

-- GET RESTAURANTS WITH OUT ORDER - USING JOINS [LEFT OUTER JOIN]
	--SELECT * FROM Restaurant R 
	--LEFT JOIN [Order] O ON R.RID=O.RESTID
	--WHERE O.RESTID IS NULL

-- RESTAURANT ID AND ORDER COUNT
	--SELECT RESTID, COUNT(*) ORDERCOUNT FROM [Order]
	--GROUP  BY RESTID
	--ORDER BY COUNT(*) DESC

-- Restaurants with Max Orders
		--SELECT * FROM Restaurant R
		--WHERE R.RID IN (
		--SELECT RESTID FROM [ORDER] GROUP BY RESTID HAVING COUNT(*)=(
		--SELECT TOP 1 COUNT(*) FROM [ORDER] O
		--					GROUP BY RESTID						
		--					ORDER BY COUNT(*) DESC
		--					))


-- GET THE MENUITEMS WHOSE PRICE IS MORE THAN AVERAGE PRICE IN THE 
-- GIVEN RESTAURANT - SUB-QUERY : CORROLATED SUB QUERY
		--SELECT * FROM MENUITEM M1
		--WHERE M1.PRICE > 
		--(SELECT AVG(M2.PRICE) 
		--FROM MENUITEM M2 GROUP BY M2.RESTAURANTID
		--HAVING M1.RESTAURANTID=M2.RESTAURANTID
		--)

--GET VEG ONLY RESTAURANTS
-- SUBQUERY, CORROLATRED SUBQUERY
		--SELECT * FROM Restaurant R1
		--WHERE NOT EXISTS (SELECT * FROM MENUITEM M1 
		--WHERE M1.RESTAURANTID=R1.RID AND DISHTYPE='NON-VEG')

	-- SUB QUERY.
		--SELECT * FROM Restaurant
		--WHERE RID NOT IN (SELECT DISTINCT(RESTAURANTID) 
		--FROM MenuItem WHERE DISHTYPE='NON-VEG')